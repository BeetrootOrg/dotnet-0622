


15 --- Generics(Узагальнення) -----------------------------------------------------------------

Це такий спосіб написати код(інтерфейс, клас чи метод) який може однаково працювати незалежно від того який тип данних туди буде передано.
Наприклад:

- звичайний метод тут ми просто написали, що в метод передаються 2 змінні типу int і метод іх буде використовувати як int.
метод проведе над значеннями дію, і після виконня методу ці зніммі будуть мати вже інші значення (а стане 5, )

static void Swap(ref int a, ref int b);// ref це ключове слово яке ознаачає що наші змінні будуть передані не як значення а як посилання на них і посуті
{
    int temp = a;
    a = b;
    b = temp;
}

int a = 2, b = 5;// сворили 2 змінні і ініціювали іх значеннями. обидві змінні одного типу int.
Swap(ref a, ref b); // виклик методу, в нього ми передали значення чих змінних за посиланням ,передача за посиланням дасть нам змогу провести зміну цих значень.

- а ось як виглядатиме це саме але в дженеріковому виконні.
ми після назви методу вказуємо <T> це і є ключовий вираз який вказує що метод дженеріковий. Посуті замість Т можна вказати будь що але код конвеншн вказує 
що потрібно починати з великої букви Т
навіщо це потрібно - посуті тут ми вже можемо передати не лише інт а взагалі будь який тип данних і метод відпрацює так само, візьме і замінить місцями значення в двох змінних

Swap<T>(ref T a, ref T b);//
{
    T temp = a;
    a = b;
    b = temp;
}

викликати метод дженеріковий так само як і звичайний
int a = 2, b = 5;// сворили 2 змінні і ініціювали іх значеннями. обидві змінні одного типу int.
Swap(ref a, ref b); // виклик методу, в нього ми передали значення чих змінних за посиланням ,передача за посиланням дасть нам змогу провести зміну цих значень.
тут ВАЖЛИВО: обидві змінні що передані в такий метод мають бути одного типу(наприклда обидва інти, чи string чи інше )
Swap<T1, T2>(ref T a, ref T2 b);// ось так можна передати якщо змінні різного типу, але тут вже потрібно не свап метод а щось інше що буде логічним для роботи з різними типами.

// такий дженеріковий метод  не приймає параметри але повертає якийсь дженеріковий результат. 
 default це ключове слово яке вказує тут що буде повернуто значення за замовчуванням для цього типу данних (T)
напркилад якщо б (Т) то було інт типу значення то повернуло би 0 бо для велью типів дефолтне значення то 0. а для референс типів дефолтне то null
static T TestMethod<T>();
{
    return default(T);//
}

В дженерікає є Generics constraints - це обмеження типів, що можуть використовуватися в Generic структурі.
воно потрібно тоді коли нам потрібно обмежити узагальненість нашого коді.
наприклад ось такий дженерік інтерфейс має обмеження (where це ключове слово яке вказує на те що дженерік має обмеження)
interface IFactory<out TInstance, in TParam> where TInstance : new()
тут (TInstance : new() ) обмеження в тому что ми можемо використовувати наш дженерік тільки з тими типами які мають дефолтний конструктор.

---- Звязані списки ------ LinkedList
Це дженериковий тип посуті щось типу масиву array 